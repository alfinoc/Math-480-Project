from random import choice, randint, gammavariate, shuffle
from conf import *

NUM_CLASSES = range(2, 4)
NUM_SECTIONS = range(1, 2)

# Inserts a 0 preference for the given hour on each of the provided day keys.
def blackoutDays(preferences, days, hour):
   for day in days:
      if 0 <= hour and hour < len(preferences[day]):
         preferences[day][hour] = 0

# Inserts a 0 preference for the given hour on M, W and F.
def blackoutMWF(preferences, hour):
   blackoutDays(preferences, ['Monday', 'Wednesday', 'Friday'], hour)

# Inserts a 0 preference for the given hour on T and Th.
def blackoutTTh(preferences, hour):
   blackoutDays(preferences, ['Tuesday', 'Thursday'], hour)

# Returns a normalized copy of the vector where every element e in the copy is
# the original element in vector divided by the maximum value in vector.
def normalize(vector):
   m = max(vector)
   return map(lambda x : float(x) / m, vector)

# Pick a random ranking (1 to 7) of preferred days of the week, then multiply
# each day's preference vector by a coefficient (rank / maxrank).
def tierDays(preferences):
   def zeroOut(l):
      for i in range(len(l)):
         l[i] = 0
   maxRank = len(preferences.keys())
   ordering = [ float(i) / maxRank for i in range(1, maxRank + 1) ]
   shuffle(ordering)
   for day in preferences:
      tier = ordering.pop()
      preferences[day] = map(lambda val : tier * val, preferences[day])

# Returns a preference dict, with day keys and hour list values. All preference
# values are initially one.
def preferenceMap():
   preferences = {}
   for day in HOURS:
      preferences[day] = [1] * HOURS[day]
   return preferences

# Inserts zeroes for a uniformly random number of courses and sections. Only the
# first 5 hours of the day can be blacked out.
def blackoutCourses(preferences):
   # Black out some MWF lectures.
   chosen = set()
   for i in range(choice(NUM_CLASSES)):
      hour = choice(list(set(range(8)) - chosen))
      chosen.add(hour)
      blackoutMWF(preferences, hour)

   # Black out some TTh Sections
   chosen = set()
   for i in range(choice(NUM_SECTIONS)):
      hour = choice(list(set(range(8)) - chosen))
      chosen.add(hour)
      blackoutTTh(preferences, hour)
   return preferences

# Returns a gamma distribution centered on 'peak' as a vector of floats in
# [e, 1] where e is closer to zero (but never zero) with higher samples. The
# returned vector has give size, and peak must be a valid index in this vector.
def preferenceVector(size, peak, samples=1000):
   if peak < 0 or size <= peak:
      raise ValueError('peak index out of range')
   overlay = [1] * size
   for i in range(samples):
      point = int(gammavariate(float(peak) / 3, 3))
      if (0 <= point and point < size):
         overlay[point] += 1
   return normalize(overlay)

# Returns a random preference map for one TA.
def getRandomTAPreferenceMap():
   prefs = preferenceMap()
   blackoutCourses(prefs)
   for day in prefs:
      hours = len(prefs[day])
      vect = preferenceVector(hours, randint(1, hours - 1))
      for i in range(hours):
         prefs[day][i] *= vect[i]
   tierDays(prefs)
   return prefs

# Converts the preference map to a simple list of hours, based on alphabetically
# ordered day keys.
def serialize(prefMap):
   result = []
   for day in prefMap:
      result += prefMap[day]
   return result

# Converts an hour list representation to a day-keyed preference map. Assumes
# that the given list was generated by serialize().
def deserialize(prefList):
   result = preferenceMap()
   index = 0
   for day in result:
      for i in range(len(result[day])):
         result[day][i] = prefList[index]
         index += 1
   return result
